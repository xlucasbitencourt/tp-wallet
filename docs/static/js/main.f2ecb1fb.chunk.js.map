{"version":3,"sources":["actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/Expenses.js","components/TableExpenses.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN","GET_CURRENCIES","ADD_EXPENSE","UPDATE_AMOUNT","DELETE_EXPENSE","URL","addExpense","expense","type","payload","updateDelete","expenses","id","dispatch","newExpenses","filter","deleteExpense","updateAmount","entry","Object","values","exchangeRates","currency","code","codein","ask","value","newExpense","fetch","fetchCurr","json","response","INITIAL_STATE","email","password","user","state","action","currencies","editor","idToEdit","wallet","total","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","buttonDisabled","handleChange","target","name","setState","enableButton","length","test","clickLogin","props","history","userLogin","push","this","className","onChange","required","min","onClick","disabled","React","Component","mapDispatchToProps","userData","connect","Header","updateTotal","totalAmount","reduce","acc","curr","parseFloat","toFixed","description","method","tag","Expenses","buttonAddExpense","expenseId","htmlFor","map","key","TableExpenses","delete","delExp","item","Wallet","responseJson","currenciesList","keys","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2ecb1fb.chunk.js","sourcesContent":["// Coloque aqui suas actions\r\nexport const LOGIN = 'LOGIN';\r\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\r\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\r\nexport const UPDATE_AMOUNT = 'UPDATE_AMOUNT';\r\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\r\n\r\nconst URL = 'https://economia.awesomeapi.com.br/json/all';\r\n\r\nexport const login = (userData) => ({\r\n  type: LOGIN,\r\n  payload: userData,\r\n});\r\n\r\nexport const getCurrencies = (currenciesData) => ({\r\n  type: GET_CURRENCIES,\r\n  payload: currenciesData,\r\n});\r\n\r\nexport const addExpense = (expense) => ({\r\n  type: ADD_EXPENSE,\r\n  payload: expense,\r\n});\r\n\r\nexport const deleteExpense = (expenses) => ({\r\n  type: DELETE_EXPENSE,\r\n  payload: expenses,\r\n});\r\n\r\nexport const updateDelete = (expenses, id) => (dispatch) => {\r\n  const newExpenses = expenses.filter((expense) => expense.id !== id);\r\n  dispatch(deleteExpense(newExpenses));\r\n  return newExpenses;\r\n};\r\n\r\nconst updateAmount = (expense) => {\r\n  const currencies = Object.values(expense.exchangeRates);\r\n  const curr = currencies.filter((currency) => (\r\n    currency.code === expense.currency && currency.codein === 'BRL'\r\n  ));\r\n  const entry = curr[0].ask * expense.value;\r\n  return ({\r\n    type: UPDATE_AMOUNT,\r\n    payload: entry,\r\n  });\r\n};\r\n\r\nexport const newExpense = (expense) => async (dispatch) => {\r\n  const fetchCurr = await fetch(URL);\r\n  const response = await fetchCurr.json();\r\n\r\n  dispatch(addExpense({\r\n    ...expense,\r\n    exchangeRates: response,\r\n  }));\r\n\r\n  dispatch(updateAmount({\r\n    ...expense,\r\n    exchangeRates: response,\r\n  }));\r\n};\r\n\r\nexport const fetchCurrencies = () => async (dispatch) => {\r\n  const response = await fetch(URL);\r\n  const responseJson = await response.json();\r\n\r\n  const currenciesList = Object.keys(responseJson)\r\n    .filter((currency) => currency !== 'USDT');\r\n\r\n  dispatch(getCurrencies(currenciesList));\r\n};\r\n","import { LOGIN } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nconst user = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case LOGIN: {\r\n    return {\r\n      ...state,\r\n      ...action.payload,\r\n    };\r\n  }\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default user;\r\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\r\nimport { GET_CURRENCIES, ADD_EXPENSE, UPDATE_AMOUNT, DELETE_EXPENSE } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  currencies: [],\r\n  expenses: [],\r\n  editor: false,\r\n  idToEdit: 0,\r\n  // total: 0,\r\n};\r\n\r\nconst wallet = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case GET_CURRENCIES: {\r\n    return {\r\n      ...state,\r\n      currencies: [...action.payload],\r\n    };\r\n  }\r\n  case ADD_EXPENSE: {\r\n    return {\r\n      ...state,\r\n      expenses: [...state.expenses, action.payload],\r\n    };\r\n  }\r\n  case UPDATE_AMOUNT: {\r\n    return {\r\n      ...state,\r\n      total: state.total + action.payload,\r\n    };\r\n  }\r\n  case DELETE_EXPENSE: {\r\n    return {\r\n      ...state,\r\n      expenses: action.payload,\r\n    };\r\n  }\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default wallet;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n\r\nconst rootReducer = combineReducers({ user, wallet });\r\n\r\nexport default rootReducer;\r\n\r\n// Configure os seus reducers.\r\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../actions';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends React.Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n    buttonDisabled: true,\r\n  }\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({\r\n      [name]: value,\r\n    }, this.enableButton);\r\n  }\r\n\r\n  enableButton = () => {\r\n    const MIN_LENGHT = 6;\r\n    const EMAIL_VALIDO = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/img;\r\n    const { email, password } = this.state;\r\n    if (password.length >= MIN_LENGHT && EMAIL_VALIDO.test(email)) {\r\n      this.setState({ buttonDisabled: false });\r\n    } else this.setState({ buttonDisabled: true });\r\n  }\r\n\r\n  clickLogin = () => {\r\n    const { history, userLogin } = this.props;\r\n    const { email, password } = this.state;\r\n    userLogin({ email, password });\r\n    history.push('/carteira');\r\n  }\r\n\r\n  render() {\r\n    const { buttonDisabled, email, password } = this.state;\r\n    return (\r\n      <div className=\"login\">\r\n        <form>\r\n          <input\r\n            name=\"email\"\r\n            value={ email }\r\n            onChange={ this.handleChange }\r\n            data-testid=\"email-input\"\r\n            type=\"email\"\r\n            required\r\n          />\r\n          <input\r\n            name=\"password\"\r\n            value={ password }\r\n            onChange={ this.handleChange }\r\n            data-testid=\"password-input\"\r\n            type=\"password\"\r\n            required\r\n            min=\"6\"\r\n          />\r\n          <button\r\n            onClick={ this.clickLogin }\r\n            type=\"button\"\r\n            disabled={ buttonDisabled }\r\n          >\r\n            Entrar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  userLogin: login,\r\n};\r\n\r\nLogin.propTypes = {\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func,\r\n  }).isRequired,\r\n  userLogin: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends Component {\r\n  updateTotal = () => {\r\n    const { expenses } = this.props;\r\n    const totalAmount = expenses.reduce((acc, curr) => {\r\n      acc += parseFloat(curr.value) * parseFloat(curr.exchangeRates[curr.currency].ask);\r\n      return acc;\r\n    }, 0);\r\n    return parseFloat(totalAmount);\r\n  }\r\n\r\n  render() {\r\n    const { email } = this.props;\r\n    return (\r\n      <div className=\"header\">\r\n        <span data-testid=\"email-field\">{email}</span>\r\n        <span data-testid=\"total-field\">{ this.updateTotal().toFixed(2)}</span>\r\n        <span data-testid=\"header-currency-field\">BRL</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  email: state.user.email,\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nHeader.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Header);\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newExpense } from '../actions';\r\n\r\nconst INITIAL_STATE = {\r\n  value: '',\r\n  description: '',\r\n  currency: 'USD',\r\n  method: 'Dinheiro',\r\n  tag: 'Alimentacao',\r\n};\r\nclass Expenses extends Component {\r\n  state = INITIAL_STATE;\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  buttonAddExpense = () => {\r\n    const { expenseId, dispatch } = this.props;\r\n    const { value, description, currency, method, tag } = this.state;\r\n\r\n    dispatch(newExpense({\r\n      id: expenseId,\r\n      value,\r\n      description,\r\n      currency,\r\n      method,\r\n      tag,\r\n    }));\r\n\r\n    this.setState(INITIAL_STATE);\r\n  }\r\n\r\n  render() {\r\n    const { currencies } = this.props;\r\n    const { value, description, currency, method, tag } = this.state;\r\n    return (\r\n      <div className=\"expenses\">\r\n        <label htmlFor=\"value\">\r\n          <span>Valor</span>\r\n          <input\r\n            data-testid=\"value-input\"\r\n            type=\"number\"\r\n            name=\"value\"\r\n            value={ value }\r\n            onChange={ this.handleChange }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"description\">\r\n          <span>Descrição</span>\r\n          <input\r\n            data-testid=\"description-input\"\r\n            name=\"description\"\r\n            value={ description }\r\n            onChange={ this.handleChange }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"currency\">\r\n          <span>Moeda</span>\r\n          <select\r\n            name=\"currency\"\r\n            id=\"currency\"\r\n            value={ currency }\r\n            onChange={ this.handleChange }\r\n          >\r\n            {currencies.map((curr) => (\r\n              <option key={ curr } value={ curr }>\r\n                {curr}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"method\">\r\n          <span>Pagamento</span>\r\n          <select\r\n            data-testid=\"method-input\"\r\n            name=\"method\"\r\n            id=\"method\"\r\n            value={ method }\r\n            onChange={ this.handleChange }\r\n          >\r\n            <option value=\"Dinheiro\">Dinheiro</option>\r\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\r\n            <option value=\"Cartão de débito\">Cartão de débito</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"tag\">\r\n          <span>Categoria</span>\r\n          <select\r\n            data-testid=\"tag-input\"\r\n            name=\"tag\"\r\n            id=\"tag\"\r\n            value={ tag }\r\n            onChange={ this.handleChange }\r\n          >\r\n            <option value=\"Alimentacao\">Alimentação</option>\r\n            <option value=\"Lazer\">Lazer</option>\r\n            <option value=\"Trabalho\">Trabalho</option>\r\n            <option value=\"Transporte\">Transporte</option>\r\n            <option value=\"Saúde\">Saúde</option>\r\n          </select>\r\n        </label>\r\n        <button type=\"button\" onClick={ this.buttonAddExpense }>Adicionar despesa</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currencies: state.wallet.currencies,\r\n  expenseId: state.wallet.expenses.length,\r\n});\r\n\r\n// const mapDispatchToProps = {}\r\n\r\nExpenses.propTypes = {\r\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  expenseId: PropTypes.number.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Expenses);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { updateDelete } from '../actions';\r\n\r\nclass TableExpenses extends Component {\r\n  delete = (expense, id) => {\r\n    const { delExp } = this.props;\r\n    delExp(expense, id);\r\n  }\r\n\r\n  render() {\r\n    const { expenses } = this.props;\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Descrição</th>\r\n            <th>Tag</th>\r\n            <th>Método de pagamento</th>\r\n            <th>Valor</th>\r\n            <th>Moeda</th>\r\n            <th>Câmbio utilizado</th>\r\n            <th>Valor convertido</th>\r\n            <th>Moeda de conversão</th>\r\n            <th>Editar/Excluir</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            expenses.map((item) => (\r\n              <tr key={ item.id }>\r\n                <td>{item.description}</td>\r\n                <td>{item.tag}</td>\r\n                <td>{item.method}</td>\r\n                <td>{parseFloat(item.value).toFixed(2)}</td>\r\n                <td>{item.exchangeRates[item.currency].name}</td>\r\n                <td>{parseFloat(item.exchangeRates[item.currency].ask).toFixed(2)}</td>\r\n                <td>{(item.value * item.exchangeRates[item.currency].ask).toFixed(2)}</td>\r\n                <td>Real</td>\r\n                <td>\r\n                  <button\r\n                    data-testid=\"delete-btn\"\r\n                    type=\"button\"\r\n                    name=\"excluir\"\r\n                    onClick={ () => this.delete(expenses, item.id) }\r\n                  >\r\n                    Excluir\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  expenses: state.wallet.expenses,\r\n  newExpenses: state.wallet,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  delExp: (expenses, id) => { dispatch(updateDelete(expenses, id)); },\r\n});\r\n\r\nTableExpenses.propTypes = {\r\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  delExp: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableExpenses);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\nimport { fetchCurrencies } from '../actions';\r\nimport Expenses from '../components/Expenses';\r\nimport TableExpenses from '../components/TableExpenses';\r\n\r\nclass Wallet extends React.Component {\r\n  componentDidMount() {\r\n    const { dispatch } = this.props;\r\n    dispatch(fetchCurrencies());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Expenses />\r\n        <TableExpenses />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nWallet.propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect()(Wallet);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/Login';\r\nimport Wallet from './pages/Wallet';\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/carteira\" component={ Wallet } />\r\n      <Route exact path=\"/\" component={ Login } />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}